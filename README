/*
 * README
 * ------
 * Put the results of the Performance Test here.  Also, include the names
 * of your team members and any special instructions for compiling, etc.,
 * if you did something besides the standard Makefile.
 *
 * Group Members: Troy Varney - tav285 [troy.a.varney@gmail.com]
 */

Performance Test: Accelerated (GDC 3rd floor lab)
-----------------------------
    Mode    | Solid |  Wire |
------------|-------|-------|
   Mode 1   | 17.99 | 17.99 |
   Mode 2   | 18.00 |       |
   Mode 3   | 17.99 |       |
   Mode 4   | 17.99 | 18.01 |
   Mode 5   | 17.99 |       |
   Mode 6   | 17.99 |       |
   Mode 7   | 18.00 | 17.99 |
 Mode 7 (2) | 18.00 | 18.00 |
 Mode 9 (3) | 17.98 |       |
-----------------------------

(1) - Cone was drawn using 50, 50 for the third and fourth arguments.
(2) - Second run was done with a triangulation of 50.
(3) - The model and shader used were the default. The model has 158974 vertices
      and normals, with 53010 triangles. The shader implements per vertex
      ambient/diffuse/specular lighting.

Performance Analysis: Accelerated
  Performance was not significantly altered by drawing mode or even number of
  vertices. There was no test of using the old direct mode with large numbers
  of vertices without 'expensive' calculations being done on the CPU.

Compilation Notes:
==================
Makefile changed significantly.
Project requires bison and flex to compile (both are on standard CS machines).

To make the project works exactly the same as before, just type 'make'.
To run the project, either directly run the generated executable, or type
'make run'. This will compile the executable if it is not already present.
Running 'make lines' will report the total line count of the project.

The wavefront parser will print out any comments in the file, used to allow the
program to give credit to the creator of the model.

There is a bit of 'dead' code; namely the Texture loader and cache model. It
was going to be used for texture-mapping in materials, but there wasn't enough
time to complete that. SceneGraph was intended to be used to allow easier
rendering of complex scenes, but very little work was actually done on that.

Extra Credit
============
1. Both the VRML scene and the calculated cone respect the display style chosen
   for GLUT. This means if the display style is DS_WIRE, those scenes will
   display a wireframe. Press 's' to change them back to filled polygons.
2. A subset of wavefront .obj and .mtl files can be loaded. The code will
   attempt to load the model from "./data/model/model.obj" and any files that
   are included from that file.
b3. The code can compile and link vertex and fragment shaders. Included shaders
   are ./data/shaders/free.vs and ./data/shaders/free.fs, which implement a
   slightly shoddy form of ADS lighting.
4. The code can load textures from png files. This is currently not used.
5. Alternate models and shaders may be loaded by specifying them as command
   line arguments. The format for this is:
   Model:
     -m FILE
   Shader:
     -s BASENAME
   The model argument expects the full path+filename of a valid wavefront
   object file, though it doesn't need to follow any specific naming
   conventions.
   The shader argument expects the 'basename' of the shader, that is the full
   path plus the common name between the vertex and fragment shader. For the
   default shader, this would be "./data/shaders/free", which is then converted
   to "./data/shaders/free.vs" and "./data/shaders/free.fs". Fragment shaders
   must use the file extension ".fs" and vertex shaders ".vs".
   The program binds values to uniforms:
     "Ka" -> vec3
     "Kd" -> vec3
     "Ks" -> vec3
     "Tr" -> float
     "Ns" -> float
     "Light.Position" -> vec4
     "Light.La" -> vec3
     "Light.Ld" -> vec3
     "Light.Ls" -> vec3

Example commands:
  ./canvas -m"./data/model/blueshell.obj"
  ./canvas -m"./data/model/fancy_cube.obj"
  ./canvas -m"./data/model/blueshell.obj" -s"./data/shaders/pp_pphon"


Code Map:
  inc/
    common.hpp
    drawing.hpp
    mouse.hpp
    vrml.hpp
    generic/
      Geometry.hpp
          Templated geometry primitives.
      Image.hpp
          Image class, intermediate storage between disk and texture.
      ImageIO.hpp
          Image loading service.
      Material.hpp
          Material struct for lighting.
      Model.hpp
          Model class, used to store and draw models loaded from disk.
      SceneGraph.hpp (WIP)
          Implementation of a SceneGraph; incomplete.
      Shader.hpp
          Shader loader, compiler, linker, and utilities in class form.
      String.hpp
          Wrapper around std::string that provides operator==() for string
          comparison.
      TextureCache.hpp
          Cache for loaded textures. Unused in project.
      Texture.hpp
          Wrapper class around OpenGL texture.
      WavefrontLoader.hpp
          Wavefront OBJ loader interface. Provides interface to load models as
          well as a parser interface used by the bison generated files.
  src/
    material.l
    material.y
        Flex and Bison files for the material sub-parser.
    wavefront.l
    wavefront.y
        Flex and Bison files for the wavefront obj parser.    

Major Changes:
  * Most defines have been removed in favor of enums.
  * VRML code was rewrote to use a class called "Object" which encapsulates the
    VRML data and parses it into an OpenGL friendly format.
  * print_disp_mode was changed to use the disp_mode variable to get the string
    from an array; code length reduced, logic is easier.
  * print_disp_style has the same change, using disp_style.
  * A load_shaders function was added to canvas.cpp. This is used to allow
    falling back to the default shader if the specified one does not exist or
    has errors in compilation or linking.
  * Argument parsing using getopt (provided by <unistd.h>) added to init
    function.
  * Added the 'm' and 'M' keys to myKeyHandler; they swap the freeform scene
    drawing mode between drawing the loaded model and drawing the simple
    glut scene.

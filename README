/*
 * README
 * ------
 * Put the results of the Performance Test here.  Also, include the names
 * of your team members and any special instructions for compiling, etc.,
 * if you did something besides the standard Makefile.
 *
 * Group Members: Troy Varney - tav285 [troy.a.varney@gmail.com]
 */

Things of Note:
Makefile changed significantly.
Project requires bison and flex to compile (both are on standard CS machines).
Project 'translated' to C++.
Significantly rewrote vrml.cpp to use classes to hide raw state.

To make the project works exactly the same, just type 'make'.
To run the project, either directly run the generated executable, or type
'make run'. This will compile the executable if it is not already present.
Running 'make lines' will report the total line count of the project.

Extras:
1. Both the VRML scene and the calculated cone respect the display style chosen
   for GLUT. This means if the display style is DS_WIRE, those scenes will
   display a wireframe. Press 's' to change them back to filled polygons.
2. A subset of wavefront .obj and .mtl files can be loaded. The code will
   attempt to load the model from "./data/model/model.obj" and any files that
   are included from that file.
3. The code can compile and link vertex and fragment shaders. Included shaders
   are ./data/shaders/free.vs and ./data/shaders/free.fs, which implement a
   slightly shoddy form of ADS lighting.
4. The code can load textures from png files. This is currently not used.
5. Alternate models and shaders may be loaded by specifying them as command
   line arguments. The format for this is:
   Model:
     -m FILE
   Shader:
     -s BASENAME
   The model argument expects the full path+filename of a valid wavefront
   object file, though it doesn't need to follow any specific naming
   conventions.
   The shader argument expects the 'basename' of the shader, that is the full
   path plus the common name between the vertex and fragment shader. For the
   default shader, this would be "./data/shaders/free", which is then converted
   to "./data/shaders/free.vs" and "./data/shaders/free.fs". Fragment shaders
   must use the file extension ".fs" and vertex shaders ".vs".
   The program binds values to uniforms:
     "Ka" -> vec3
     "Kd" -> vec3
     "Ks" -> vec3
     "Tr" -> float
     "Ns" -> float
     "Light.Position" -> vec4
     "Light.La" -> vec3
     "Light.Ld" -> vec3
     "Light.Ls" -> vec3
